The current version of this code is 1.5-pre3

Please refer to this version number in all communications with the author

If the version number above is of the format N.N-pre, the code you are looking at is transitional between stable 
points with "production" quality levels.  Things may be broken, there may be code that isn't finished, there may be
bugs (or at least more than usual).  Caveat emptor.

The notes below on version history reflect the changes between full, stable versions of the simulation code.  

VERSION HISTORY

Version 1.5-pre3 IS NOT YET A COMPLETE RELEASE OF TRANSMISSIONLAB
    I've added tracking of how long each trait spends (if any), in each position of the Top N list.  This is
    cumulative "dwell" or "sojourn" time in that state.  The data are output in a CSV matrix within the run-specific
    output directory.  
Version 1.5-pre2 IS NOT YET A COMPLETE RELEASE OF TRANSMISSIONLAB.
    I've got an XML configuration thing going for the model but it's incomplete, and
    I've started adding structured populations into the system via the JUNG library.  I've now added trait
    residence time calculation, adding both a histogram of the values as they change during the simulation and
    tracking of the mean/stdev by the OverallStatisticsRecorder.  At the request of Peter Schauer, I'm also adding back
    the ability to dump the frequency of traits every N model ticks.  
Version 1.4 abstracts the "model" class into a set of consistent infrastructure, and a concrete class which now
    defines a "specific" simulation model.  Each simulation model class inherits the common infrastructure by
    extending AbstractTLModel (and thus implementing interface ISimulationModel), and is responsible for a few simple
    operations: defining model-specific parameters and variables, constructing population "rules" for the simulation,
    constructing an initial population of agents, and adding any IDataCollector classes desired for "observing" the
    simulation as it runs.  Everything else, including the implementation of the Repast SimModelImpl methods, is
    done in the AbstractTLModel class.  The point to this restructuring is to allow multiple models to be written
    which "share" data collectors, population rules, and population "factories."  The former TransmissionLabModel class
    is deprecated, in favor of an implementation called NeutralCTModel which is the "same" simulation but written against
    the new infrastructure.  Binary distributions of the neutral random copying model would therefore specify NeutralCTModel
    as the new "main class" in the jar manifest.  
Version 1.3 adds data collection for the number of agents (on average) who have traits which come from the "top N"
    list.  This is a rough measure of the evenness of agents across trait classes, but even as a rough measure it'll be
    useful for "long tail" type studies.  The perl script for data reduction handles this new set of columns.  Also,
    full batch-mode operation works in version 1.3, and I did some work to allow very simple batch-mode operation
    purely from the JAR file (since the Repast command line for batch mode is a pain in the butt with classpath
    setup, full path to the model class, etc.  I far prefer the ability just say:
    java -jar transmissionlab.jar -b parameterfile.pf
    and have the runtime do the right thing.  Remove the "-b" and you get the GUI.  This is especially useful since
    the GUI updates really slow down batch mode simulations -- by a factor of 10-100x given what people say on the
    Repast mailing lists.  
Version 1.2 includes a data collector which calculates, at the end of each simulation run, overall statistics for
    the run.  These currently include the mean and standard deviation of the per-tick turnover and total # trait
    statistics.  These are reported into a tab-delimited text file along with the number of agents, length of the run
    in ticks, random number seed, and mutation rate.  The file is opened for appending, so it is written to
    cumulatively over multiple runs and serves as a simple "database" of results across many runs.  The first time
    this file is opened, if it does not exist previously, a header of column names are written to the file.  The file
    is thus suitable for direct import into Excel or another analysis program for graphing and statistics.  The
    random seed is written to the file since we could easily be doing multiple replicate runs per set of parameters
    and we'll want to know (a) each unique run, signaled by a unique seed value, and (b) what the seed was for
    possible exact replication in the future.  In order to facilitate this statistics collection, the scheduling
    of data collectors is made generic over previous versions -- the model no longer "knows" the schedule for each
    data collector but instead each data collector class is responsible for scheduling itself.  Data collector
    classes are allowed to schedule themselves "before" the simulation starts (i.e., tick #1), during each tick of
    the running simulation (which now officially starts with tick #2 to give us a meaningful "before" time slice), or
    at the end of the simulation, when the stop() method is called either by the simulation model itself or if the
    stop button is pressed.  Basically, we should be ready for batch mode parameter sweeps.
Version 1.1 is packaged with a second "transmission rule" in addition to the original Wright-Fisher process; a 
	generalized version of the original Moran process.  By default the rule runs a true original Moran process -- 
	one individual per tick is chosen to die, and another random individual is chosen to "reproduce" by cloning
	that agent to replace the dead agent.  All other agents persist into the new tick.  This model is configurable
	in a "generalized" Moran process by allowing configuration of the number of "pairs" of individuals which 
	will undergo the death-birth process each tick.  The agent classes and interface are also considerably 
	restructured, with nearly every place that deals with agents handling IAgent or List<IAgent> instead
	of individual agent classes.  A few places persist where analysis classes, or IPopulationTransformationRules, 
	need to know the concrete class of an agent (e.g., to call a class-specific method like getAgentVariant()).  
	This needs to be further generalized in future releases since such casts are typically to access agent-specific
	fields (like trait variants) which should be abstractable.  This is highly desirable if transmission and mutation
	rules are going to be kept separate from knowledge of other aspects of the simulation and done as abstractly as
	possible: otherwise we'd end up with combinatorial explosions of MoranProcessTransmissionForSingleIntegerVariantAgents
	classes and other nonsense.  
Version 1.0 is identical with the Bentley RandomCopyModel version 1.3 but will diverge and that model 
	will be frozen for archival use.  
	
	
PREVIOUS VERSION HISTORY OF RANDOMCOPYMODEL

Version 1.3 has a new structure for population (and by extension, individual agent) rules.  We consider any 
	population-level rule to implement the Commons Functor Transformer pattern, taking an IAgentPopulation
	and returning another (or the same) IAgentPopulation after performing some type of transformation rule.  This
	will allow all agent and population rules to be modeled simply as a chain of transformers in sequence (or in 
	parallel, potentially).  The existing mutation rule has been moved to RandomAgentInfiniteAllelesMutation in the 
	rules package, and the random copying transmission rule itself has been moved to 
	NonOverlappingRandomSamplingTransmission in the rules package.  Both of the original methods have been removed
	from the model class.  Also, Bentley agreed to deprecate the old top40 tracking code, so the analysis module
	OriginalTurnoverGraphCollector has been moved to package "deprecated" for the moment and all model references
	eliminated.
Version 1.2 has correct schedule interleaving of model & analysis modules after refactoring the execution of modules 
	and actions, in prep for also making mutation and transmission into abstract interfaces outside the main model class.
	I also added a second data "series" to the TraitFrequencyAnalyzer's total variability 
	graph, showing the constant level of Ewen's 4Nmu statistic for the given model run, 
	so we can see how we converge to it but bounce around given finite population
	effects (or so I hypothesize - am hoping it's not a modeling artifact).
Version 1.1 is an "internal" release made only to C.P. Lipo on 2/28/07 - this model version has working "old" and "new"
	turnover calculations and graphs, and a graph of total variability.  I don't think I'd added the Ewens 4Nmu comparison
	level to the TraitFrequencyAnalyzer's total variability graph yet.  Data snapshots to files work in this version as
	well because I hadn't refactored the old statically allocated array logic out of the model class into the 
	old top40 analysis class.  Basically the whole thing works.  This version also ships with a "current" project
	directory structure, and embeds all the JAR files needed to run this, including Repast itself and updated versions
	of Jakarta Commons libraries which are getting pretty long in the tooth in the official Repast distro.  This version
	also includes the Creative Commons-GNU General Public License, a README, and a VERSION file.  This is the first 
	version since I started working on it that is suitable for public distribution.
Version 1.0 was a "private" version number marking all edits made to the original Bentley model during the Jan/Feb 2007.
	There's a ton of reorganization but it's pretty primitive.  I made no snapshot of it to give anyone, but can easily pull
	the version out of Subversion from prior to my Long Beach trip.  Not really worth doing, however, because I got a lot
	of reorganization and refactoring done on the trip.  
