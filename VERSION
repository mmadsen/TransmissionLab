The current version of this code is 1.1

Please refer to this version number in all communications with the author

If the version number above is of the format N.N-pre, the code you are looking at is transitional between stable 
points with "production" quality levels.  Things may be broken, there may be code that isn't finished, there may be
bugs (or at least more than usual).  Caveat emptor.

The notes below on version history reflect the changes between full, stable versions of the simulation code.  

VERSION HISTORY

Version 1.1 is packaged with a second "transmission rule" in addition to the original Wright-Fisher process; a 
	generalized version of the original Moran process.  By default the rule runs a true original Moran process -- 
	one individual per tick is chosen to die, and another random individual is chosen to "reproduce" by cloning
	that agent to replace the dead agent.  All other agents persist into the new tick.  This model is configurable
	in a "generalized" Moran process by allowing configuration of the number of "pairs" of individuals which 
	will undergo the death-birth process each tick.  The agent classes and interface are also considerably 
	restructured, with nearly every place that deals with agents handling IAgent or List<IAgent> instead
	of individual agent classes.  A few places persist where analysis classes, or IPopulationTransformationRules, 
	need to know the concrete class of an agent (e.g., to call a class-specific method like getAgentVariant()).  
	This needs to be further generalized in future releases since such casts are typically to access agent-specific
	fields (like trait variants) which should be abstractable.  This is highly desirable if transmission and mutation
	rules are going to be kept separate from knowledge of other aspects of the simulation and done as abstractly as
	possible: otherwise we'd end up with combinatorial explosions of MoranProcessTransmissionForSingleIntegerVariantAgents
	classes and other nonsense.  
Version 1.0 is identical with the Bentley RandomCopyModel version 1.3 but will diverge and that model 
	will be frozen for archival use.  
	
	
PREVIOUS VERSION HISTORY OF RANDOMCOPYMODEL

Version 1.3 has a new structure for population (and by extension, individual agent) rules.  We consider any 
	population-level rule to implement the Commons Functor Transformer pattern, taking an IAgentPopulation
	and returning another (or the same) IAgentPopulation after performing some type of transformation rule.  This
	will allow all agent and population rules to be modeled simply as a chain of transformers in sequence (or in 
	parallel, potentially).  The existing mutation rule has been moved to RandomAgentInfiniteAllelesMutation in the 
	rules package, and the random copying transmission rule itself has been moved to 
	NonOverlappingRandomSamplingTransmission in the rules package.  Both of the original methods have been removed
	from the model class.  Also, Bentley agreed to deprecate the old top40 tracking code, so the analysis module
	OriginalTurnoverGraphCollector has been moved to package "deprecated" for the moment and all model references
	eliminated.
Version 1.2 has correct schedule interleaving of model & analysis modules after refactoring the execution of modules 
	and actions, in prep for also making mutation and transmission into abstract interfaces outside the main model class.
	I also added a second data "series" to the TraitFrequencyAnalyzer's total variability 
	graph, showing the constant level of Ewen's 4Nmu statistic for the given model run, 
	so we can see how we converge to it but bounce around given finite population
	effects (or so I hypothesize - am hoping it's not a modeling artifact).
Version 1.1 is an "internal" release made only to C.P. Lipo on 2/28/07 - this model version has working "old" and "new"
	turnover calculations and graphs, and a graph of total variability.  I don't think I'd added the Ewens 4Nmu comparison
	level to the TraitFrequencyAnalyzer's total variability graph yet.  Data snapshots to files work in this version as
	well because I hadn't refactored the old statically allocated array logic out of the model class into the 
	old top40 analysis class.  Basically the whole thing works.  This version also ships with a "current" project
	directory structure, and embeds all the JAR files needed to run this, including Repast itself and updated versions
	of Jakarta Commons libraries which are getting pretty long in the tooth in the official Repast distro.  This version
	also includes the Creative Commons-GNU General Public License, a README, and a VERSION file.  This is the first 
	version since I started working on it that is suitable for public distribution.
Version 1.0 was a "private" version number marking all edits made to the original Bentley model during the Jan/Feb 2007.
	There's a ton of reorganization but it's pretty primitive.  I made no snapshot of it to give anyone, but can easily pull
	the version out of Subversion from prior to my Long Beach trip.  Not really worth doing, however, because I got a lot
	of reorganization and refactoring done on the trip.  
